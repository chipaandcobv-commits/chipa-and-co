generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  dni          String        @unique
  avatar       String?
  createdAt    DateTime      @default(now())
  password     String
  updatedAt    DateTime      @updatedAt
  puntos       Int           @default(0)
  puntosHistoricos Int       @default(0) // Puntos totales ganados hist√≥ricamente
  role         UserRole      @default(USER)
  orders       Order[]
  rewardClaims RewardClaim[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Float
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  totalAmount Float
  totalPoints Int
  clientDni   String
  createdAt   DateTime    @default(now())
  items       OrderItem[]
  client      User        @relation(fields: [clientDni], references: [dni], onDelete: Cascade)
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float
  total     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Reward {
  id          String        @id @default(uuid())
  name        String
  description String?
  pointsCost  Int
  isActive    Boolean       @default(true)
  imageUrl    String?
  stock       Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  claims      RewardClaim[]
}

model RewardClaim {
  id          String   @id @default(uuid())
  rewardId    String
  userId      String
  pointsSpent Int
  status      String   @default("PENDING")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reward      Reward   @relation(fields: [rewardId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}
